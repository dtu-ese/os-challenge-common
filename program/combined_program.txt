===== server.c =====
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "queue.h"
#include "thread_pool.h"
#include "cache.h"
#include "bruteforce.h"
#include "processing.h"

int main(int argc, char *argv[])
{
    int sockfd, newsockfd, portno, clilen;
    struct sockaddr_in serv_addr, cli_addr;

    // Initialize mutexes and condition variables
    pthread_mutex_init(&queue_mutex, NULL);
    pthread_cond_init(&queue_cond, NULL);
    pthread_cond_init(&queue_full_cond, NULL);
    pthread_mutex_init(&cache_mutex, NULL);

    // Create and initialize worker threads
    initialize_thread_pool();

    // Set up the server socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
        perror("ERROR opening socket");
        exit(1);
    }

    bzero((char *)&serv_addr, sizeof(serv_addr));
    if (argc < 2)
    {
        fprintf(stderr, "ERROR, no port provided\n");
        exit(1);
    }

    portno = atoi(argv[1]);
    if (portno <= 0)
    {
        fprintf(stderr, "ERROR, invalid port number\n");
        exit(1);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        perror("ERROR on binding");
        exit(1);
    }

    listen(sockfd, 5);
    clilen = sizeof(cli_addr);

    // Main server loop to accept connections
    while (1)
    {
        newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);
        if (newsockfd < 0)
        {
            perror("ERROR on accept");
            exit(1);
        }

        // Enqueue the new request for processing
        enqueue_request(newsockfd);
    }

    // Clean up before exit (though we will likely never get here)
    pthread_mutex_destroy(&queue_mutex);
    pthread_cond_destroy(&queue_cond);
    pthread_cond_destroy(&queue_full_cond);
    pthread_mutex_destroy(&cache_mutex);

    return 0;
}


// Header netinet/in.h not found in the directory.

// Header stdio.h not found in the directory.

// Header stdlib.h not found in the directory.

// Header string.h not found in the directory.

// Header unistd.h not found in the directory.

===== queue.h =====
#ifndef QUEUE_H
#define QUEUE_H

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define QUEUE_SIZE 500

// Request structure for the queue
typedef struct
{
    int sockfd;
} Request;

// Request queue and associated variables
Request request_queue[QUEUE_SIZE];
int queue_size = 0;
int queue_start = 0;
int queue_end = 0;

// Mutex and condition variables for queue management
pthread_mutex_t queue_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t queue_cond = PTHREAD_COND_INITIALIZER;
pthread_cond_t queue_full_cond = PTHREAD_COND_INITIALIZER;

// Enqueue a request in the request queue
void enqueue_request(int sockfd)
{
    pthread_mutex_lock(&queue_mutex);
    while (queue_size == QUEUE_SIZE)
    {
        pthread_cond_wait(&queue_full_cond, &queue_mutex);
    }

    request_queue[queue_end].sockfd = sockfd;
    queue_end = (queue_end + 1) % QUEUE_SIZE;
    queue_size++;

    pthread_cond_signal(&queue_cond);
    pthread_mutex_unlock(&queue_mutex);
}

// Dequeue a request from the request queue
int dequeue_request()
{
    pthread_mutex_lock(&queue_mutex);
    while (queue_size == 0)
    {
        pthread_cond_wait(&queue_cond, &queue_mutex);
    }

    int sockfd = request_queue[queue_start].sockfd;
    queue_start = (queue_start + 1) % QUEUE_SIZE;
    queue_size--;

    pthread_cond_signal(&queue_full_cond);
    pthread_mutex_unlock(&queue_mutex);

    return sockfd;
}

#endif // QUEUE_H


===== thread_pool.h =====
#ifndef THREAD_POOL_H
#define THREAD_POOL_H

#include <pthread.h>
#include "queue.h"
#include "processing.h"

#define THREAD_POOL_SIZE 4

pthread_t thread_pool[THREAD_POOL_SIZE];

// Worker thread function
void *worker_thread(void *arg)
{
    while (1)
    {
        int sockfd = dequeue_request();
        doprocessing((void *)&sockfd);
        close(sockfd);
    }
    return NULL;
}

// Initialize the thread pool
void initialize_thread_pool()
{
    for (int i = 0; i < THREAD_POOL_SIZE; i++)
    {
        if (pthread_create(&thread_pool[i], NULL, worker_thread, NULL) < 0)
        {
            perror("ERROR creating worker thread");
            exit(1);
        }
    }
}

#endif // THREAD_POOL_H


===== cache.h =====
#ifndef CACHE_H
#define CACHE_H

#include <pthread.h>
#include <stdint.h>
#include <openssl/sha.h>
#include <string.h>
#include <stdio.h>

// Enum for cache status
typedef enum
{
    NONE,
    IN_PROGRESS,
    SOLVED
} CacheStatus;

// Structure for cache entries
typedef struct
{
    uint64_t number;
    unsigned char hash[SHA256_DIGEST_LENGTH];
    CacheStatus status;
    pthread_cond_t condition;
} HashCacheEntry;

// Cache array and cache management variables
HashCacheEntry cache[1000];
int cache_size = 0;
pthread_mutex_t cache_mutex = PTHREAD_MUTEX_INITIALIZER;

// Find a cache entry with status
int find_cache_with_status(unsigned char target_hash[], uint64_t *result)
{
    pthread_mutex_lock(&cache_mutex);
    for (size_t i = 0; i < cache_size; i++)
    {
        if (memcmp(cache[i].hash, target_hash, SHA256_DIGEST_LENGTH) == 0)
        {
            if (cache[i].status == SOLVED)
            {
                *result = cache[i].number;
                pthread_mutex_unlock(&cache_mutex);
                return SOLVED;
            }
            else if (cache[i].status == IN_PROGRESS)
            {
                pthread_mutex_unlock(&cache_mutex);
                return IN_PROGRESS;
            }
        }
    }
    pthread_mutex_unlock(&cache_mutex);
    return NONE;
}

// Add a cache entry in-progress
void add_cache_in_progress(unsigned char target_hash[])
{
    pthread_mutex_lock(&cache_mutex);
    cache[cache_size].number = 0;
    memcpy(cache[cache_size].hash, target_hash, SHA256_DIGEST_LENGTH);
    cache[cache_size].status = IN_PROGRESS;
    pthread_cond_init(&cache[cache_size].condition, NULL);
    cache_size++;
    pthread_mutex_unlock(&cache_mutex);
}

// Add a solved cache entry
void add_cache(unsigned char target_hash[], uint64_t num)
{
    pthread_mutex_lock(&cache_mutex);
    cache[cache_size].number = num;
    memcpy(cache[cache_size].hash, target_hash, SHA256_DIGEST_LENGTH);
    cache_size++;
    pthread_mutex_unlock(&cache_mutex);
}

#endif // CACHE_H


===== bruteforce.h =====
#ifndef BRUTEFORCE_H
#define BRUTEFORCE_H

#include <stdint.h>
#include <openssl/sha.h>
#include "cache.h"
#include <stdio.h>

// Brute force function
uint64_t bruteForce(unsigned char target_hash[], uint64_t start, uint64_t end)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    uint64_t result;

    int status = find_cache_with_status(target_hash, &result);
    if (status == SOLVED)
    {
        printf("Match found in cache for number: %llu\n", result);
        return result;
    }
    else if (status == IN_PROGRESS)
    {
        printf("Waiting for another thread to finish processing the same hash...\n");
        pthread_mutex_lock(&cache_mutex);
        while (status == IN_PROGRESS)
        {
            for (size_t i = 0; i < cache_size; i++)
            {
                if (memcmp(cache[i].hash, target_hash, SHA256_DIGEST_LENGTH) == 0)
                {
                    pthread_cond_wait(&cache[i].condition, &cache_mutex);
                    result = cache[i].number;
                    break;
                }
            }
        }
        pthread_mutex_unlock(&cache_mutex);
        return result;
    }

    add_cache_in_progress(target_hash);

    for (uint64_t num = start; num < end; num++)
    {
        SHA256((unsigned char *)&num, sizeof(num), hash);
        if (memcmp(hash, target_hash, SHA256_DIGEST_LENGTH) == 0)
        {
            printf("Match found for number: %llu\n", num);
            pthread_mutex_lock(&cache_mutex);
            for (size_t i = 0; i < cache_size; i++)
            {
                if (memcmp(cache[i].hash, target_hash, SHA256_DIGEST_LENGTH) == 0)
                {
                    cache[i].number = num;
                    cache[i].status = SOLVED;
                    pthread_cond_broadcast(&cache[i].condition);
                    break;
                }
            }
            pthread_mutex_unlock(&cache_mutex);
            return num;
        }
    }

    printf("No match found.\n");
    pthread_mutex_lock(&cache_mutex);
    for (size_t i = 0; i < cache_size; i++)
    {
        if (memcmp(cache[i].hash, target_hash, SHA256_DIGEST_LENGTH) == 0)
        {
            cache[i].status = NONE;
            pthread_cond_broadcast(&cache[i].condition);
            break;
        }
    }
    pthread_mutex_unlock(&cache_mutex);

    return -1;
}

#endif // BRUTEFORCE_H


===== processing.h =====
#ifndef PROCESSING_H
#define PROCESSING_H

#include <stdint.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include "bruteforce.h"
#include "messages.h"
#include <stdlib.h>

// Processing client requests
void *doprocessing(void *sock)
{
    int newsockfd = *((int *)sock);
    unsigned char buffer[PACKET_REQUEST_SIZE];
    bzero(buffer, PACKET_REQUEST_SIZE);

    int n = read(newsockfd, buffer, PACKET_REQUEST_SIZE);
    if (n < 0)
    {
        perror("ERROR reading from socket");
        exit(1);
    }

    uint64_t start, end, result;
    memcpy(&start, buffer + PACKET_REQUEST_START_OFFSET, sizeof(start));
    start = be64toh(start);
    memcpy(&end, buffer + PACKET_REQUEST_END_OFFSET, sizeof(end));
    end = be64toh(end);

    result = bruteForce(buffer, start, end);
    uint64_t num_net = htobe64(result);

    n = write(newsockfd, &num_net, sizeof(num_net));
    if (n < 0)
    {
        perror("ERROR writing to socket");
        exit(1);
    }

    return NULL;
}

#endif // PROCESSING_H


